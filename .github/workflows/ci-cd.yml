name: PWA CI/CD Workflow

on:
  push:
    branches:
      - development         # Para pruebas internas
      - feature/*           # Ramas de características específicas por desarrollador
      - main                # Para despliegue en producción
      - release/*           # Ramas de release para producción
  pull_request:
    branches:
      - development
      - main
      - release/*
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Comprobación del Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configuración del Entorno de Node.js
      - name: Setup Node.js environment  # Instalación de Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'  # Versión específica de Node.js
          
      # Restauración de caché para dependencias de Node.js (npm/yarn)
      - name: Restore npm cache  # Optimiza el caché de dependencias
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      # Instalación de dependencias
      - name: Install Dependencies  # Instala las dependencias del proyecto
        run: npm install

      # Configuración de variables de entorno
      - name: Set environment variables
        run: |
          echo "API_KEY=${{ secrets.API_KEY }}" >> $GITHUB_ENV
          echo "STAGING_TOKEN=${{ secrets.STAGING_TOKEN }}" >> $GITHUB_ENV

      # Pruebas Unitarias con Jest
      #- name: Run Unit Tests # Ejecuta las pruebas unitarias
      #  run: npm test -- --coverage # Ejecuta Jest con cobertura

      # Generación de Reportes de Cobertura
      - name: Upload Coverage Report # Subir el reporte de cobertura
        if: always()  # Este paso siempre se ejecutará, incluso si las pruebas fallan
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/ # Ajustar la ruta según el directorio de salida del reporte de Jest

      # Pruebas de Integración o End-to-End con Cypress
      - name: Install Cypress # Instalación de Cypress
        run: npm install cypress --save-dev

      - name: Run E2E Tests with Cypress # Ejecutar pruebas E2E con Cypress
        run: npx cypress run

      # Compilación del proyecto
      - name: Build Project # Compila el proyecto
        run: npm run build

      # Subir el artefacto de compilación
      - name: Upload Build Artifact # Guarda el artefacto de compilación
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: ./build # Ajustar la ruta según el directorio de salida de tu proyecto

  deploy:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      # Comprobación del Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configuración del Entorno de Node.js
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      # Instalación de dependencias
      - name: Install Dependencies
        run: npm install

      # Despliegue a Producción
      - name: Deploy to Production
        run: |
          echo "Deploying application..."
          # Aquí agregarías tu lógica de despliegue (ej: script de despliegue)
